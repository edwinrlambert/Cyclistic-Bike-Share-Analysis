# Print all plots.
print(total_rides_plot)
print(average_ride_length_plot)
print(average_distance_plot)
# Find the average ride_length and distance by rider type.
usage_stats <- cyclistic_data %>%
group_by(member_casual) %>%
summarise(
total_rides = n(),
average_ride_length = mean(ride_length),
average_distance = mean(trip_distance)
)  %>%
# Visualize the percentage of total rides for each rider type.
mutate(percentage = total_rides / sum(total_rides) * 100,
avg_ride_min = average_ride_length / 60)
# Visualize a pie chart with total rides as percentage labels
total_rides_plot <- create_plot(
data = usage_stats,
x_var = NULL, y_var = "total_rides", fill_var = "member_casual",
plot_type = "pie",
title = "Total Rides by Rider Type",
label_var = "percentage"
)
# Visualize average ride length for each rider type.
average_ride_length_plot <- create_plot(
data = usage_stats,
x_var = "member_casual", y_var = "avg_ride_min", fill_var = "member_casual",
plot_type = "bar",
title = "Average Ride Length by Rider Type",
x_label = "Rider Type", y_label = "Average Ride Length (minutes)",
label_var = "avg_ride_min"
)
# Visualize average trip distance for each rider type.
average_distance_plot <- create_plot(
data = usage_stats,
x_var = "member_casual", y_var = "average_distance", fill_var = "member_casual",
plot_type = "bar",
title = "Average Distance by Rider Type",
x_label = "Rider Type", y_label = "Average Distance",
label_var = "average_distance"
)
# Print all plots.
print(total_rides_plot)
print(average_ride_length_plot)
print(average_distance_plot)
# Custom function to create plots.
create_plot <- function(
data,
x_var = NULL, y_var = NULL, fill_var = NULL,
plot_type = "bar",
title, x_label = NULL, y_label = NULL,
label_var = NULL, text_position = "stack", text_vjust = 0.5,
text_color = color_data_point, text_size = 4) {
base_aes <- set_base_aes(plot_type, x_var, y_var, fill_var)
base_plot <- set_ggplot_objs(data, base_aes, title, x_label, y_label)
base_plot <- set_geom_layers(base_plot, plot_type, x_var)
base_plot <- customize_x_axis(base_plot, x_var)
if (!is.null(label_var)) {
base_plot <- set_geom_text(base_plot, label_var, position = text_position, vjust = text_vjust, color = text_color, size = text_size)
}
return(base_plot)
}
# Find the average ride_length and distance by rider type.
usage_stats <- cyclistic_data %>%
group_by(member_casual) %>%
summarise(
total_rides = n(),
average_ride_length = mean(ride_length),
average_distance = mean(trip_distance)
)  %>%
# Visualize the percentage of total rides for each rider type.
mutate(percentage = total_rides / sum(total_rides) * 100,
avg_ride_min = average_ride_length / 60)
# Visualize a pie chart with total rides as percentage labels
total_rides_plot <- create_plot(
data = usage_stats,
x_var = NULL, y_var = "total_rides", fill_var = "member_casual",
plot_type = "pie",
title = "Total Rides by Rider Type",
label_var = "percentage"
)
# Visualize average ride length for each rider type.
average_ride_length_plot <- create_plot(
data = usage_stats,
x_var = "member_casual", y_var = "avg_ride_min", fill_var = "member_casual",
plot_type = "bar",
title = "Average Ride Length by Rider Type",
x_label = "Rider Type", y_label = "Average Ride Length (minutes)",
label_var = "avg_ride_min"
)
# Visualize average trip distance for each rider type.
average_distance_plot <- create_plot(
data = usage_stats,
x_var = "member_casual", y_var = "average_distance", fill_var = "member_casual",
plot_type = "bar",
title = "Average Distance by Rider Type",
x_label = "Rider Type", y_label = "Average Distance",
label_var = "average_distance"
)
# Print all plots.
print(total_rides_plot)
print(average_ride_length_plot)
print(average_distance_plot)
# Custom function to set base aesthetics
set_base_aes <- function (plot_type, x_var, y_var, fill_var) {
if (plot_type == "pie") {
aes(
x = "", y = !!sym(y_var), fill = !!sym(fill_var), color = !!sym(fill_var)
)
} else {
aes(
x = if (!is.null(x_var)) !!sym(x_var) else NULL,
y = !!sym(y_var), fill = !!sym(fill_var), color = !!sym(fill_var)
)
}
}
# Custom function to set the base ggplot ojects.
set_ggplot_objs <- function(data, base_aes, title, x_label, y_label) {
ggplot(data, base_aes) +
scale_fill_manual(
values = c("casual" = color_casual, "member" = color_member)) +
scale_color_manual(
values = c("casual" = color_casual, "member" = color_member)) +
scale_y_continuous(labels = format_k_m) +
labs(
title = title,
x = x_label, y = y_label,
fill = "Rider Type", color = "Rider Type"
) +
theme_minimal()
}
# Custom function to add geom layer based on plot type.
set_geom_layers <- function(base_plot, plot_type, x_var) {
if (plot_type == "bar") {
base_plot + geom_bar(stat = "identity", position = position_dodge())
} else if (plot_type == "pie") {
base_plot + geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
theme_void()
} else if (plot_type == "line") {
base_plot + geom_line(size = 1) + geom_point(size = 2)
}
}
# Custom function to add geom_text
set_geom_text <- function(base_plot, label_var, position = "stack", vjust = 0.5, color = color_data_point, size = 4) {
base_plot + geom_text(
aes(label = round(!!sym(label_var), 2)),
position = if (position == "stack") position_stack(vjust = vjust) else position,
color = color,
size = size
)
}
# Function to customize x-axis for hourly data
customize_x_axis <- function(base_plot, x_var) {
if (!is.null(x_var) && x_var == "hour") {
base_plot +
scale_x_continuous(breaks = 0:23, labels = paste0(0:23, ":00")) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
} else {
base_plot
}
}
# Find the average ride_length and distance by rider type.
usage_stats <- cyclistic_data %>%
group_by(member_casual) %>%
summarise(
total_rides = n(),
average_ride_length = mean(ride_length),
average_distance = mean(trip_distance)
)  %>%
# Visualize the percentage of total rides for each rider type.
mutate(percentage = total_rides / sum(total_rides) * 100,
avg_ride_min = average_ride_length / 60)
# Visualize a pie chart with total rides as percentage labels
total_rides_plot <- create_plot(
data = usage_stats,
x_var = NULL, y_var = "total_rides", fill_var = "member_casual",
plot_type = "pie",
title = "Total Rides by Rider Type",
label_var = "percentage"
)
# Visualize average ride length for each rider type.
average_ride_length_plot <- create_plot(
data = usage_stats,
x_var = "member_casual", y_var = "avg_ride_min", fill_var = "member_casual",
plot_type = "bar",
title = "Average Ride Length by Rider Type",
x_label = "Rider Type", y_label = "Average Ride Length (minutes)",
label_var = "avg_ride_min"
)
# Visualize average trip distance for each rider type.
average_distance_plot <- create_plot(
data = usage_stats,
x_var = "member_casual", y_var = "average_distance", fill_var = "member_casual",
plot_type = "bar",
title = "Average Distance by Rider Type",
x_label = "Rider Type", y_label = "Average Distance",
label_var = "average_distance"
)
# Print all plots.
print(total_rides_plot)
print(average_ride_length_plot)
print(average_distance_plot)
# Find the ride frequency by day of week by rider type.
ride_freq_by_day_of_week <- cyclistic_data %>%
group_by(member_casual, day_of_week) %>%
summarise(
total_rides = n(),
.groups = "drop"
)
# Visualize ride frequency by day of week.
ride_freq_by_day_of_week_plot <- create_plot(
data = ride_freq_by_day_of_week,
x_var = "day_of_week", y_var ="total_rides", fill_var = "member_casual", "bar",
title = "Ride Frequency by Day of the Week",
x_label = "Day of Week", y_label = "Total Rides"
)
print(ride_freq_by_day_of_week_plot)
# Find the ride frequency by day of week by rider type.
ride_freq_by_day_of_week <- cyclistic_data %>%
group_by(member_casual, day_of_week) %>%
summarise(
total_rides = n(),
.groups = "drop"
)
# Visualize ride frequency by day of week.
ride_freq_by_day_of_week_plot <- create_plot(
data = ride_freq_by_day_of_week,
x_var = "day_of_week", y_var ="total_rides", fill_var = "member_casual", "bar",
title = "Ride Frequency by Day of the Week",
x_label = "Day of Week", y_label = "Total Rides"
)
print(ride_freq_by_day_of_week_plot)
# Find the ride frequency by day of week by rider type.
ride_freq_by_day_of_week <- cyclistic_data %>%
group_by(member_casual, month(started_at)) %>%
summarise(
total_rides = n(),
.groups = "drop"
)
# Visualize ride frequency by day of week.
ride_freq_by_day_of_week_plot <- create_plot(
data = ride_freq_by_day_of_week,
x_var = "day_of_week", y_var ="total_rides", fill_var = "member_casual", "bar",
title = "Ride Frequency by Month",
x_label = "Day of Week", y_label = "Total Rides"
)
print(ride_freq_by_day_of_week_plot)
# Find the ride frequency by day of week by rider type.
ride_freq_by_month <- cyclistic_data %>%
group_by(member_casual, month = month(started_at)) %>%
summarise(
total_rides = n(),
.groups = "drop"
)
# Visualize ride frequency by day of week.
ride_freq_by_month_plot <- create_plot(
data = ride_freq_by_month,
x_var = "month", y_var ="total_rides", fill_var = "member_casual", "bar",
title = "Ride Frequency by Month",
x_label = "Month", y_label = "Total Rides"
)
print(ride_freq_by_month_plot)
# Custom function to set base aesthetics
set_base_aes <- function (plot_type, x_var, y_var, fill_var) {
if (plot_type == "pie") {
aes(
x = "", y = !!sym(y_var), fill = !!sym(fill_var), color = !!sym(fill_var)
)
} else {
aes(
x = if (!is.null(x_var)) !!sym(x_var) else NULL,
y = !!sym(y_var), fill = !!sym(fill_var), color = !!sym(fill_var)
)
}
}
# Custom function to set the base ggplot ojects.
set_ggplot_objs <- function(data, base_aes, title, x_label, y_label) {
ggplot(data, base_aes) +
scale_fill_manual(
values = c("casual" = color_casual, "member" = color_member)) +
scale_color_manual(
values = c("casual" = color_casual, "member" = color_member)) +
scale_y_continuous(labels = format_k_m) +
labs(
title = title,
x = x_label, y = y_label,
fill = "Rider Type", color = "Rider Type"
) +
theme_minimal()
}
# Custom function to add geom layer based on plot type.
set_geom_layers <- function(base_plot, plot_type, x_var) {
if (plot_type == "bar") {
base_plot + geom_bar(stat = "identity", position = position_dodge())
} else if (plot_type == "pie") {
base_plot + geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
theme_void()
} else if (plot_type == "line") {
base_plot + geom_line(size = 1) + geom_point(size = 2)
}
}
# Custom function to add geom_text
set_geom_text <- function(base_plot, label_var, position = "stack", vjust = 0.5, color = color_data_point, size = 4) {
base_plot + geom_text(
aes(label = round(!!sym(label_var), 2)),
position = if (position == "stack") position_stack(vjust = vjust) else position,
color = color,
size = size
)
}
# Function to customize x-axis for hourly data
customize_x_axis <- function(base_plot, x_var) {
if (!is.null(x_var) && x_var == "hour") {
base_plot +
scale_x_continuous(breaks = 0:23, labels = paste0(0:23, ":00")) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
} else if (!is.null(x_var) && x_var == "month") {
base_plot +
scale_x_continuous(breaks = 1:12, labels = month.abb) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
} else {
base_plot
}
}
# Find the ride frequency by day of week by rider type.
ride_freq_by_month <- cyclistic_data %>%
group_by(member_casual, month = month(started_at)) %>%
summarise(
total_rides = n(),
.groups = "drop"
)
# Visualize ride frequency by day of week.
ride_freq_by_month_plot <- create_plot(
data = ride_freq_by_month,
x_var = "month", y_var ="total_rides", fill_var = "member_casual", "bar",
title = "Ride Frequency by Month",
x_label = "Month", y_label = "Total Rides"
)
print(ride_freq_by_month_plot)
# Find the ride frequency by day of week by rider type.
ride_freq_by_month <- cyclistic_data %>%
group_by(member_casual, month = month(started_at)) %>%
summarise(
total_rides = n(),
.groups = "drop"
)
# Visualize ride frequency by day of week.
ride_freq_by_month_plot <- create_plot(
data = ride_freq_by_month,
x_var = "month", y_var ="total_rides", fill_var = "member_casual",
plot_type = "line",
title = "Ride Frequency by Month",
x_label = "Month", y_label = "Total Rides"
)
print(ride_freq_by_month_plot)
# Find the ride frequency by day of week by rider type.
ride_freq_by_month <- cyclistic_data %>%
group_by(member_casual, month = month(started_at)) %>%
summarise(
total_rides = n(),
.groups = "drop"
)
# Visualize ride frequency by day of week.
ride_freq_by_month_plot <- create_plot(
data = ride_freq_by_month,
x_var = "month", y_var ="total_rides", fill_var = "member_casual",
plot_type = "bar",
title = "Ride Frequency by Month",
x_label = "Month", y_label = "Total Rides"
)
print(ride_freq_by_month_plot)
# Find the ride frequency by day of week by rider type.
ride_freq_by_month <- cyclistic_data %>%
group_by(member_casual, month = month(started_at)) %>%
summarise(
total_rides = n(),
.groups = "drop"
)
# Visualize ride frequency by day of week.
ride_freq_by_month_plot <- create_plot(
data = ride_freq_by_month,
x_var = "month", y_var ="total_rides", fill_var = "member_casual",
plot_type = "line",
title = "Ride Frequency by Month",
x_label = "Month", y_label = "Total Rides"
)
print(ride_freq_by_month_plot)
# Find the ride frequency by day of week by rider type.
ride_freq_by_month <- cyclistic_data %>%
group_by(member_casual, month = month(started_at)) %>%
summarise(
total_rides = n(),
.groups = "drop"
)
# Visualize ride frequency by day of week.
ride_freq_by_month_plot <- create_plot(
data = ride_freq_by_month,
x_var = "month", y_var ="total_rides", fill_var = "member_casual",
plot_type = "bar",
title = "Ride Frequency by Month",
x_label = "Month", y_label = "Total Rides"
)
print(ride_freq_by_month_plot)
# Find the ride frequency by season by rider type.
ride_freq_by_season <- cyclistic_data %>%
mutate(season = factor(
season, levels = c("Winter", "Spring", "Summer", "Fall"))) %>%
group_by(member_casual, season) %>%
summarise(total_rides = n(),
.groups = "drop")
# Visualize ride frequency by season.
ride_freq_by_season_plot <- create_plot(
data = ride_freq_by_season,
x_var = "season", y_var ="total_rides", fill_var = "member_casual",
plot_type = "bar",
title = "Ride Frequency by Season",
x_label = "Season", y_label = "Total Rides"
)
print(ride_freq_by_month_plot)
# Find the ride frequency by season by rider type.
ride_freq_by_season <- cyclistic_data %>%
mutate(season = factor(
season, levels = c("Winter", "Spring", "Summer", "Fall"))) %>%
group_by(member_casual, season) %>%
summarise(total_rides = n(),
.groups = "drop")
# Visualize ride frequency by season.
ride_freq_by_season_plot <- create_plot(
data = ride_freq_by_season,
x_var = "season", y_var ="total_rides", fill_var = "member_casual",
plot_type = "bar",
title = "Ride Frequency by Season",
x_label = "Season", y_label = "Total Rides"
)
print(ride_freq_by_season_plot)
# Find the ride frequency by part of day by rider type.
ride_freq_by_day <- cyclistic_data %>%
mutate(day_part = factor(
day_part, levels = c("Morning", "Afternoon", "Evening", "Night"))) %>%
group_by(member_casual, day_part) %>%
summarise(total_rides = n(),
.groups = "drop")
# Visualize ride frequency by part of day.
ride_freq_by_day_plot <- create_plot(
data = ride_freq_by_day,
x_var = "day_part", y_var ="total_rides", fill_var = "member_casual",
plot_type = "bar",
title = "Ride Frequency by Part of Day",
x_label = "Part of Day", y_label = "Total Rides"
)
print(ride_freq_by_day_plot)
# # Install packages if they are not already installed
if (!requireNamespace("tidyverse", quietly = TRUE)) install.packages("tidyverse")
if (!requireNamespace("lubridate", quietly = TRUE)) install.packages("lubridate")
if (!requireNamespace("readr", quietly = TRUE)) install.packages("readr")
if (!requireNamespace("scales", quietly = TRUE)) install.packages("scales")
if (!requireNamespace("leaflet", quietly = TRUE)) install.packages("leaflet")
if (!requireNamespace("leaflet.extras", quietly = TRUE)) install.packages("leaflet.extras")
# Load the libraries
library(tidyverse)
library(lubridate)
library(readr)
library(leaflet)
library(leaflet.extras)
# Find the ride frequency on weekends and weekdays by rider type.
ride_freq_by_weekend_weekday <- cyclistic_data %>%
mutate(weekday_weekend = if_else(
is_weekend == "Yes", "Weekend", "Weekday")) %>%
group_by(member_casual, weekday_weekend) %>%
summarise(total_rides = n(),
.groups = 'drop')
# Visualize ride frequency by weekdays vs weekends.
ride_freq_by_weekend_weekday_plot <- create_plot(
data = ride_freq_by_weekend_weekday,
x_var = "weekday_weekend", y_var ="total_rides", fill_var = "member_casual",
plot_type = "bar",
title = "Ride Frequency (Weekend vs. Weekday)",
x_label = "Weekend vs. Weekday", y_label = "Total Rides"
)
print(ride_freq_by_weekend_weekday_plot)
# # Install packages if they are not already installed
if (!requireNamespace("tidyverse", quietly = TRUE)) install.packages("tidyverse")
if (!requireNamespace("lubridate", quietly = TRUE)) install.packages("lubridate")
if (!requireNamespace("readr", quietly = TRUE)) install.packages("readr")
if (!requireNamespace("scales", quietly = TRUE)) install.packages("scales")
if (!requireNamespace("leaflet", quietly = TRUE)) install.packages("leaflet")
if (!requireNamespace("leaflet.extras", quietly = TRUE)) install.packages("leaflet.extras")
# Load the libraries
library(tidyverse)
library(lubridate)
library(readr)
library(leaflet)
library(leaflet.extras)
# Load the CSV file to the DataFrame
cyclistic_data <- read_csv("../../dataset/cleaned/2023_cyclistic_tripdata.csv",
col_types = cols(
started_at = col_datetime(format = "%Y-%m-%d %H:%M:%S %Z"),
ended_at = col_datetime(format = "%Y-%m-%d %H:%M:%S %Z"),
day_of_week = col_integer(),
ride_length = col_time(format = "%H:%M:%S"),
.default = col_guess()
)) %>%
mutate(
# Modify the day_of_week column to use day names instead of numbers.
day_of_week = factor(day_of_week,
levels = 1:7,
labels = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")),
# Convert ride_length to seconds and overwrite the original column
ride_length = as.numeric(ride_length, units = "secs")
)
